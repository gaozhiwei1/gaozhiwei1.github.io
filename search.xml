<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wsl 安装及python环境配置</title>
      <link href="2021/06/03/wsl/"/>
      <url>2021/06/03/wsl/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇博客我将介绍如何安装wsl以及其中的python环境配置，需要读者具备一定的linux操作系统知识，以及python基本知识。</p><h3 id="1-开启虚拟机及wsl平台"><a href="#1-开启虚拟机及wsl平台" class="headerlink" title="1 开启虚拟机及wsl平台"></a>1 开启虚拟机及wsl平台</h3><p>首先搜索cmd进入命令行工具，开启windows中wsl和虚拟机功能，命令行如下</p> <pre class="line-numbers language-none"><code class="language-none">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-LinuxEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在此之后，重启电脑，并按顺序打开：控制面板-&gt; 卸载程序-&gt;启用或关闭Windows功能到如下界面、</p><p><img src="/images/1.png"></p><h3 id="2-下载Ubuntu"><a href="#2-下载Ubuntu" class="headerlink" title="2.下载Ubuntu"></a>2.下载Ubuntu</h3><p>到Windows应用商店下载ubuntu-20.04最新版，下载后点击安装，会弹出设置unixname以及两次设置密码功能，按照步骤下载安装即可，下载完ubuntu默认安装目录为</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\Admin\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简要搜索方式为下图</p><p><img src="/images/2.png"></p><h3 id="配置python环境"><a href="#配置python环境" class="headerlink" title="配置python环境"></a>配置python环境</h3><p>安装完ubuntu后，其中是自带python环境的，这么建议不要更改默认源，后面有可能会出现很大的问题（血的教训），进入ubuntu中，依次输入一下命令，利用vscode编译python。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip <span class="token comment">#安装python3的pip命令</span>$ pip3 <span class="token function">install</span> numpy matplotlib$ <span class="token function">mkdir</span> python_files <span class="token comment">#在/home/username目录下创建python_files文件夹</span>$ <span class="token builtin class-name">cd</span> python_files$ code <span class="token builtin class-name">.</span>  <span class="token comment">#下载vscode,注意code命令后的空格</span>$ <span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">777</span> /home/<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/python_files <span class="token comment">#获得修改，增加文件的权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令将帮助你进入到vscode中，建立简单的python文件，按F5编译，提示安装python编译扩展，安装后便可成功编译，如下图<br><img src="/images/3.png"></p><h3 id="配置Python绘图环境"><a href="#配置Python绘图环境" class="headerlink" title="配置Python绘图环境"></a>配置Python绘图环境</h3><p>此时利用python进行绘图是不能显示的，需要另外配置gui，进入到ubuntu原始目录下,输入cd,然后输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到.bashrc文件下，到文件最下方添加如下两行</p><pre class="line-numbers language-none"><code class="language-none">export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0export LIBGL_ALWAYS_INDIRECT=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按Esc键，和:wq命令保存上述修改。而后进入命令行使文件生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来安装简易桌面，进入<a href="https://sourceforge.net/projects/vcxsrv/">Vcxsrv</a>页面下载该工具，一路默认安装，而后打开，见到如下页面<br><img src="/images/4.png"></p><p>上面最后一个一定要勾上。接下来运行命令行安装xfce4</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfce4$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfce4-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> x11-apps$ xeyes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果出现一对眼睛，则便是安装成功。接下来安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3.8-tk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次编译python文件，便可绘图，如遇到缺少字体，百度输入报错命令，安装字体即可。</p><h3 id="将WSL迁移到D盘"><a href="#将WSL迁移到D盘" class="headerlink" title="将WSL迁移到D盘"></a>将WSL迁移到D盘</h3><p>因为C盘是系统盘，后面WSL内存可能相当大，因此很不方便，这里我们将WSL迁到D盘，首先我们在D盘下创建文件夹wsl。后面我们进入到<a href="https://github.com/DDoSolitary/LxRunOffline/releases">lxrunoffline</a>官网中下载如下工具</p><p><img src="/images/5.png"></p><p>解压到d盘下，同时配置系统的path变量，变量为D:\LxRunOffline-v3.5.0-msvc，而后进入cmd，输入lxrunoffline，如果没报错，则安装成功。后面再cmd中输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ wsl --shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>暂时关闭wsl<br>而后运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ LxRunOffline move -n Ubuntu-20.04 -d D:<span class="token punctuation">\</span>wsl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待一段时间，如果wsl文件夹中出现映射文件则代表安装正确，接下来就可以愉快的使用python进行编程了，后续还会有更新，请大家保持持续关注。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first post</title>
      <link href="2021/06/01/my-first-post/"/>
      <url>2021/06/01/my-first-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmdet框架搭建过程</title>
      <link href="2021/06/01/hello-world/"/>
      <url>2021/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>本篇博客我将介绍如何在WSL2环境下利用vscode搭建mmdet环境，该环境是用来执行深度学习目标检测任务，常见算法由faster-rcnn以及yolo目标检测算法系列，在阅读本博客之前，你的配置应当包括wsl2系统以及python编译环境。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
